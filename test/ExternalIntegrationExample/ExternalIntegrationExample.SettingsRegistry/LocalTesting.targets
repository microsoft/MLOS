<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    For local testing, use a locally built package instead of the one pulled from nuget.org.
    NOTE: this section should *not* be included in your own examples.
  -->
  <PropertyGroup Label="AdjustNugetSourcesAndTargetsForLocalTesting">
    <RestorePackagesPath>$(MSBuildThisFileDirectory)/.nuget/packages</RestorePackagesPath>
    <MlosLocalPkgOutput>$(MSBuildThisFileDirectory)/../../../target/pkg/$(Configuration)</MlosLocalPkgOutput>
    <RestoreSources>$(MlosLocalPkgOutput);$(RestoreSources);https://api.nuget.org/v3/index.json</RestoreSources>
  </PropertyGroup>
  <!-- For local testing, set the MlosPackageVersion to use dynamically using the output from the last local Pack. -->
  <Target Name="SetMlosPkgVersForLocalTesting" BeforeTargets="Restore">
    <ReadLinesFromFile File="$(MlosLocalPkgOutput)/.last-pack-version" Condition="Exists('$(MlosLocalPkgOutput)/.last-pack-version')">
      <Output TaskParameter="Lines" PropertyName="MlosPackageVersion" />
    </ReadLinesFromFile>
  </Target>
  <!-- For more convenient dev loops, build with "/p:RestoreForce=true" to force a rebuild and re-restore of the local packages. -->
  <PropertyGroup>
    <!-- Prevent this next target from running more than once. -->
    <MlosPackageCleanRan>false</MlosPackageCleanRan>
  </PropertyGroup>
  <Target Name="ForceMlosPackageRebuildRestore" Condition="'$(RestoreForce)' == 'true' And '$(MlosPackageCleanRan)' != 'true'" BeforeTargets="PackDependenciesForLocalTesting">
    <Message Text="here" Importance="high" />
    <!--
      Delete the restored Mlos packages whenever doing local dev/test/rebuilds to force a restore
      even when the version changes (e.g. due to no new commits, just edits).
    -->
    <ItemGroup>
      <RestoredMlosPackageDirsToRemove Include="$([System.IO.Directory]::GetDirectories('$(RestorePackagesPath)', 'mlos.*'))" />
      <MlosPackagesToRemove Include="$(MlosLocalPkgOutput)/Mlos.SettingsSystem.Attributes.*nupkg" />
      <MlosPackagesToRemove Include="$(MlosLocalPkgOutput)/Mlos.SettingsSystem.CodeGen.*nupkg" />
      <MlosPackagesToRemove Include="$(MlosLocalPkgOutput)/Mlos.NetCore.*nupkg" />
    </ItemGroup>
    <Message Text="Removing previously restored Mlos packages: @(RestoredMlosPackageDirsToRemove)" Importance="high" Condition="@(RestoredMlosPackageDirsToRemove->Count()) != 0" />
    <RemoveDir Directories="@(RestoredMlosPackageDirsToRemove)" />
    <Message Text="Removing old Mlos packages: @(MlosPackagesToRemove)" Importance="high" Condition="@(MlosPackagesToRemove->Count()) != 0" />
    <Delete Files="@(MlosPackageFilesToRemove)" />
    <PropertyGroup>
      <MlosPackageCleanRan>true</MlosPackageCleanRan>
    </PropertyGroup>
  </Target>
  <Target Name="PackDependenciesForLocalTesting" BeforeTargets="BeforeResolveReferences;Restore" Condition="'$(RestoreForce)' == 'true'">
    <ItemGroup Label="ProjectDependenciesForLocalTesting">
      <LocalPackProjectDependency Include="$(MSBuildThisFileDirectory)/../../../source/Mlos.SettingsSystem.Attributes/Mlos.SettingsSystem.Attributes.csproj" />
      <LocalPackProjectDependency Include="$(MSBuildThisFileDirectory)/../../../source/Mlos.SettingsSystem.CodeGen/Mlos.SettingsSystem.CodeGen.csproj" />
      <LocalPackProjectDependency Include="$(MSBuildThisFileDirectory)/../../../source/Mlos.NetCore/Mlos.NetCore.csproj" />
    </ItemGroup>
    <!-- These projects (in this order) build upon one another so we don't need to repeat the dependent builds each time. -->
    <MSBuild Projects="@(LocalPackProjectDependency)" Targets="Restore;Build;Pack" RunEachTargetSeparately="false"
      Properties="Configuration=$(Configuration);RestoreForce=$(RestoreForce);BuildProjectReferences=false" />
  </Target>
</Project>
