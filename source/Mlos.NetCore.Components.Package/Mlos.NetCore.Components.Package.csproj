<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" DefaultTargets="Build;Pack" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildThisFileDirectory)..\..\build\Mlos.Common.props" />
  <PropertyGroup>
    <ProjectGuid>{9D762D20-BCB8-417E-84A7-127B3C7852AF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <!--
    <RootNamespace>Mlos.NetCore.Components.Package</RootNamespace>
    <AssemblyName>Mlos.NetCore.Components.Package</AssemblyName>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    -->
  </PropertyGroup>
  <Import Project="$(BaseDir)\build\Mlos.NetCore.props" />
  <!--
    Note: package properties like Copyright, License, RepoUrl, PackageOutputDir, etc.
    are provided in the Mlos.NetCore.Package.props file.
    Others like Version or Commit are expected to be set on the command line during "dotnet pack".
  -->
  <Import Project="$(BaseDir)\build\Mlos.NetCore.Package.props" />
  <PropertyGroup>
    <PackageId>Mlos.NetCore.Components</PackageId>
    <Description>
      A NuGet package for a collection of .Net Core tools and libraries from MLOS.
      Provides:
      - The code generation tool, attributes, and build targets for allowing external projects to create their own
        SettingsRegistry assemblies.
      - The Mlos.NetCore and related libraries.
      - The Mlos.Agent.Server for basic end-to-end component testing/tuning.
    </Description>
    <NoWarn>$(NoWarn);NU5128</NoWarn>
    <!--
    <DevelopmentDependency>true</DevelopmentDependency>
    -->
    <!--
      We're manually crafting a package in this project, so we don't want the referenced projects to be declared
      as dependencies for this package - they aren't expected to exist individually.
      FIXME: But we need to specify the dependent dependents ... somehow ...
    -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <!-- Don't automatically copy anything into the package - we will compose that ourselves below. -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!--
      NOTE: This causes "build" issues for this project when enabled.
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
    -->
    <!-- Always output a package when building this project. -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>
  <ItemGroup Label="lib">
    <ProjectReference Include="$(SourceDir)/Mlos.Agent/Mlos.Agent.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.Agent.GrpcClient/Mlos.Agent.GrpcClient.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.Agent.GrpcServer/Mlos.Agent.GrpcServer.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.Model.Services/Mlos.Model.Services.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.Model.Services.Client/Mlos.Model.Services.Client.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.NetCore/Mlos.NetCore.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.SettingsSystem.Attributes/Mlos.SettingsSystem.Attributes.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.Streaming/Mlos.Streaming.csproj" />
  </ItemGroup>
  <ItemGroup Label="tools">
    <ProjectReference Include="$(SourceDir)/Mlos.Agent.Server/Mlos.Agent.Server.csproj" />
    <ProjectReference Include="$(SourceDir)/Mlos.SettingsSystem.CodeGen/Mlos.SettingsSystem.CodeGen.csproj" />
  </ItemGroup>
  <!-- TODO:
    Assign the ProjectReference files to the appropriate package output dirs.
  -->
  <ItemGroup>
    <!--
    <Sources Include="Mlos.NetCore.Components.Package.cs" />
    -->
    <Content Include="build/Mlos.*.targets">
      <Pack>true</Pack>
      <PackagePath>build/$(TargetFramework)/</PackagePath>
    </Content>
  </ItemGroup>
  <!-- Build up the set of files to include in the package from the PackageReference outputs. -->
  <PropertyGroup>
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);CollectMlosNetCorePackageFiles</GenerateNuspecDependsOn>
  </PropertyGroup>
  <Target Name="CollectMlosNetCorePackageFiles" AfterTargets="Build;Binplace">
    <ItemGroup>
      <LibContent Include="$(OutputPath)/Mlos.Agent.*" Exclude="Mlos.Agent.Server;Mlos.Agent.Server.*" />
      <LibContent Include="$(OutputPath)/Mlos.Model.Services.*" Exclude="Mlos.NetCore.Components;Mlos.NetCore.Components.*" />
      <LibContent Include="$(OutputPath)/Mlos.NetCore.*" Exclude="Mlos.NetCore.Components;Mlos.NetCore.Components.*" />
      <LibContent Include="$(OutputPath)/Mlos.SettingsSystem.attributes.*" />
      <LibContent Include="$(OutputPath)/Mlos.Streaming.*" />

      <!-- FIXME: These aren't being copied correctly. -->
      <ToolsContent Include="$(BaseDir)/target/bin/$(Configuration)/AnyCPU/Mlos.Agent.Server" />
      <ToolsContent Include="$(BaseDir)/target/bin/$(Configuration)/AnyCPU/Mlos.SettingsSystem.CodeGen" />

      <!-- Send lib down directly inside the lib path -->
      <Content Include="@(LibContent->'%(FullPath)')">
        <Pack>true</Pack>
        <PackagePath>lib/$(TargetFramework)/</PackagePath>
      </Content>

      <!-- Send tools down recursively, by skipping the trailing slash in the PackagePath -->
      <Content Include="@(ToolsContent->%(FullPath))/**">
        <Pack>true</Pack>
        <PackagePath>tools/$(TargetFramework)/@(ToolsContent->'%(FileName)')</PackagePath>
      </Content>
    </ItemGroup>
  </Target>
  <!-- For testing: -->
  <Target Name="PrintContentItemsLate" BeforeTargets="Pack" AfterTargets="CollectMlosNetCorePackageFiles">
    <Message Text="OutputPath: $(OutputPath)" Importance="High" />
    <Message Text="LibContent: @(LibContent)" Importance="High" />
    <Message Text="ToolsContent: @(ToolsContent)" Importance="High" />
  </Target>
  <Import Project="$(BaseDir)\build\Mlos.NetCore.targets" />
</Project>
