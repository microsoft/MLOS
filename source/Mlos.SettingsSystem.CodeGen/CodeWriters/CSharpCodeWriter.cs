// -----------------------------------------------------------------------
// <copyright file="CSharpCodeWriter.cs" company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root
// for license information.
// </copyright>
// -----------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mlos.SettingsSystem.CodeGen.CodeWriters
{
    /// <summary>
    /// Base class for writing CSharp classes.
    /// </summary>
    internal abstract class CSharpCodeWriter : CodeWriter
    {
        private static ISet<Type> typesStarted = new HashSet<Type>();

        /// <inheritdoc />
        public override void WriteBeginFile()
        {
            // Tell stylecop to ignore this file.
            //
            WriteLine("// <auto-generated />");

            // Tell stylecop to *really* ignore some documentation requirement rules.
            //
            WriteLine("#pragma warning disable CS1591");
        }

        /// <inheritdoc />
        public override void WriteEndFile()
        {
            WriteLine("#pragma warning restore CS1591");
        }

        /// <inheritdoc />
        public override void WriteOpenTypeNamespace(string @namespace)
        {
            WriteLine($"namespace {@namespace}");
            WriteLine("{");

            ++IndentationLevel;
        }

        /// <inheritdoc />
        public override void WriteCloseTypeNamespace(string @namespace)
        {
            --IndentationLevel;
            WriteLine($"}} // end namespace {@namespace}");

            WriteLine();
        }

        /// <inheritdoc />
        public override void WriteComments(CodeComment codeComment)
        {
            // Nothing.
            //
        }

        /// <inheritdoc />
        public override void EndVisitType(Type sourceType)
        {
            IndentationLevel--;

            WriteLine($"}} // end type {sourceType.Name}");
            WriteLine();
        }

        /// <summary>
        /// Open type declaration.
        /// </summary>
        /// <param name="sourceType"></param>
        protected void WriteOpenTypeDeclaration(Type sourceType)
        {
            if (sourceType == null)
            {
                return;
            }

            WriteOpenTypeDeclaration(sourceType.DeclaringType);

            string typeName = sourceType.Name;
            string typeRepresentation = sourceType.IsClass ? "class" : "struct";

            if (!typesStarted.Contains(sourceType))
            {
                // Make sure this attribute only appears once per (partial) type definition.
                //
                WriteLine(@"[System.CodeDom.Compiler.GeneratedCode(""Mlos.SettingsSystem.CodeGen"", """")]");
                typesStarted.Add(sourceType);
            }

            WriteBlock($@"
                partial {typeRepresentation} {typeName}
                {{");
            ++IndentationLevel;
        }

        /// <summary>
        /// Close type declaration.
        /// </summary>
        /// <param name="sourceType"></param>
        protected void WriteCloseTypeDeclaration(Type sourceType)
        {
            if (sourceType == null)
            {
                return;
            }

            WriteCloseTypeDeclaration(sourceType.DeclaringType);

            --IndentationLevel;
            WriteLine($"}} // end type {sourceType.Name}");
            WriteLine();
        }

        /// <inheritdoc />
        public override string FilePostfix => "_base.cs";
    }
}
