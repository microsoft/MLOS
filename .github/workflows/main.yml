# MLOS continuous integration pipelines:
#
# - Build/Test on Windows
# - Build/Test Ubuntu 16.04, 18.04, 20.04
#   (using docker images which also get published on success)
# - Check for license headers
# - Generate a static website (and link check it)

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "1 0 * * *"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run the debug/retail msbuild jobs separately so they can be executed in parallel.

  windows-msbuild:
    name: Run ${{ matrix.configuration }} msbuild on Windows
    runs-on: windows-2019
    timeout-minutes: 20
    strategy:
      matrix:
        configuration: [Debug, Release]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # Runs multiple commands using the runners shell
    - name: Msbuild/test ${{ matrix.configuration }}
      timeout-minutes: 15
      shell: cmd
      run: |
        set Configuration=${{ matrix.configuration }}
        scripts\build.windows.cmd
    - name: Pack/test ${{ matrix.configuration }}
      timeout-minutes: 15
      shell: cmd
      run: |
        set Configuration=${{ matrix.configuration }}
        scripts\package.windows.cmd

  # Docker build process overview:
  # - We currently use the docker.pkg.github.com package registry as a staging
  # ground to cache the ":latest" version of the build image.
  # - For authentication we use the built-in GITHUB_TOKEN secret to avoid the
  # need to setup special secrets (see forked repo considerations below).
  # Once it adds GITHUB_TOKEN supported, we will switch the pipelines to use
  # the recently announced ghcr.io registry completely.
  # - To support forked repos also executing the actions workflows (e.g. for
  # local testing), we use variables and target the local fork's package registry.
  # - For each PR, we rebuild the images using a combination of local action
  # caching layer, the upstream ":latest" image, and the local fork's ":latest"
  # image and tag the result using the ":git-sha" in the local cache.
  # - Images are not pushed to the package registry until all of the tests pass.
  # - To support parallel testing, we need to "rebuild" the image in several
  # steps (hence the caches).
  # - In this same workflow, we nightly do a clean rebuild without any caches
  # (again running tests before pushing it).
  # - By only pushing the "latest" we reduce the burden of having the garbage
  # collect any old images that were published using the git-sha.

  prep-vars:
    name: Prepare some variables for dependent jobs
    runs-on: ubuntu-latest
    outputs:
      # docker only recognizes lower case registry names and doesn't provide a native function,
      # so we need to perform a small shell transformation
      repository-name-tolower: ${{ steps.repository-name-tolower.outputs.repository-name-tolower }}
      utc-date: ${{ steps.utc-date.outputs.utc-date }}
      utc-ts: ${{ steps.utc-ts.outputs.utc-ts }}
      main-sha: ${{ steps.main-sha.outputs.main-sha }}
      UbuntuVersionMatrix: ${{ steps.UbuntuVersionMatrix.outputs.UbuntuVersionMatrix }}
    steps:
    - id: repository-name-tolower
      name: Compute the lowercase github docker package registry name
      shell: bash
      run: echo "::set-output name=repository-name-tolower::${{ github.repository }}" | tr A-Z a-z
    - id: utc-date
      # Used as an additional cache-busting aid to make sure we do a fresh image build every day.
      name: Compute current UTC date
      shell: bash
      run: echo ::set-output name=utc-date::$(date -u +%Y-%m-%d)
    - id: utc-ts
      name: Compute current UTC timestamp
      shell: bash
      run: echo ::set-output name=utc-ts::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: main
    - id: main-sha
      name: Lookup the current git sha for the main branch
      shell: bash
      run: echo ::set-output name=main-sha::$(git rev-parse refs/heads/main)
    - id: UbuntuVersionMatrix
      name: Setup UbuntuVersion matrix
      shell: bash
      # For PRs, we only check a subset of the UbuntuVersions.
      # For everything else (nightly, Merge, etc.) we run all of them.
      run: |
        if [ "$GITHUB_REF" == 'refs/heads/main' ] || [ "$GITHUB_EVENT_NAME" == "schedule" ]; then
          echo '::set-output name=UbuntuVersionMatrix::[16.04, 18.04, 20.04]'
        else
          echo '::set-output name=UbuntuVersionMatrix::[16.04, 20.04]'
        fi

  docker-image-fresh-build:
    name: Build fresh Ubuntu ${{ matrix.UbuntuVersion }} image
    needs: prep-vars
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        UbuntuVersion: ${{ fromJson(needs.prep-vars.outputs.UbuntuVersionMatrix) }}
    steps:
    - name: Check event type
      if: github.event_name != 'schedule'
      run: echo "Skipping fresh image build during non-scheduled event."
    # All other steps should only execute on scheduled events.
    # Setting up the conditional checks on steps this way instead of the job
    # allows the action dependency graph to work better.
    - name: Checkout
      if: github.event_name == 'schedule'
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      if: github.event_name == 'schedule'
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      if: github.event_name == 'schedule'
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Save the buildx cache output keyed by the git commit sha and UbuntuVersion.
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        #restore-keys: (no fallback)
    - name: Build image
      if: github.event_name == 'schedule'
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        target: mlos-build-base-without-extras
        tags: mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }}
        # Force a fresh build
        no-cache: true
        pull: true
        #cache-from: (none)
        cache-to: type=local,dest=/tmp/.buildx-cache
        #load: true

  docker-image-cached-build:
    name: Build Ubuntu ${{ matrix.UbuntuVersion }} image (cache)
    runs-on: ubuntu-latest
    # Reuse the cache from the fresh build if it ran.
    # This let's us keep the rest of the workflow for publishing fresh images the same.
    needs: [prep-vars, docker-image-fresh-build]
    timeout-minutes: 20
    strategy:
      matrix:
        UbuntuVersion: ${{ fromJson(needs.prep-vars.outputs.UbuntuVersionMatrix) }}
    env:
      MLOS_GCR_USR: ${{ secrets.MLOS_GCR_USR }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Try to load the image cache for this sha (e.g. in case a fresh build job just did it).
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        # We probably don't already have a cache for this sha (e.g. during PR checks).
        # So, fallback to using the most recently published image cache.
        # Note: Including additional keys may seem like it improves the rebuild
        # time since we know we'll get a cache hit from a previously built
        # image, but it can lead to growing cache sizes that get propogated
        # forward, which can actually increase build times.
        # Really only "published" versions should be allowed to be reused.
        #  mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-
        #  mlos-buildx-${{ matrix.UbuntuVersion }}-
        restore-keys: |
          mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ needs.prep-vars.outputs.main-sha }}
    - name: Github Docker Package Registry Login
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Github Docker Container Registry Login
      if: ${{ env.MLOS_GCR_USR != '' }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.MLOS_GCR_USR }}
        password: ${{ secrets.MLOS_GCR_PAT }}
    - name: Build image
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        target: mlos-build-base-without-extras
        tags: mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }}
        # Even if the local cache doesn't have anything, allow using the latest published version.
        cache-from: |
          type=local,src=/tmp/.buildx-cache
          docker.pkg.github.com/${{ needs.prep-vars.outputs.repository-name-tolower }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
          ghcr.io/${{ needs.prep-vars.outputs.repository-name-tolower }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
          docker.pkg.github.com/microsoft/mlos/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
          ghcr.io/microsoft-cisl/mlos/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
        cache-to: type=local,dest=/tmp/.buildx-cache
        #load: true

  linux-build-test:
    name: Ubuntu ${{ matrix.UbuntuVersion }} ${{ matrix.configuration }} ${{ matrix.cxx }} build/test C++/C#
    runs-on: ubuntu-latest
    needs: [prep-vars, docker-image-cached-build]
    timeout-minutes: 30
    strategy:
      matrix:
        UbuntuVersion: ${{ fromJson(needs.prep-vars.outputs.UbuntuVersionMatrix) }}
        configuration: [Debug, Release]
        cxx: [clang++-10, g++]
        include:
          - cxx: clang++-10
            cc: clang-10
          - cxx: g++
            cc: gcc
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # "Fetch" the docker image precached by the "docker-image-cached-build" job that
    # we depend on by re-executing (roughly) its same steps.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      id: load-docker-cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Load the output cache from the docker-image-cached-build job.
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        #restore-keys: (no fallback)
    # To prevent race issues, abort if that fails.
    - name: Check for docker cache hit
      if: steps.load-docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Failed to load docker image cache from previous job.  Perhaps another workflow forced it out.  Please try again."
        exit 1
    - name: Import cached image
      timeout-minutes: 10
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        target: mlos-build-base-without-extras
        tags: mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache
        load: true
    # Now start an instance of that container image.
    - name: Start ${{ matrix.configuration }} docker instance for Ubuntu ${{ matrix.UbuntuVersion }}
      shell: bash
      run: |
        docker run -it -d -v $PWD:/src/MLOS -u $UID --env CONFIGURATION=${{ matrix.configuration }} \
          --env CC=${{ matrix.cc }} --env CXX=${{ matrix.cxx }} \
          --name mlos-${{ matrix.Configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }}
    - name: Setup local user in docker Container
      shell: bash
      run: |
        docker exec -u root mlos-${{ matrix.Configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          /src/MLOS/scripts/setup-container-user.sh github-action-runner $(id -u) $(id -g)
    - name: Run ${{ matrix.configuration }} dotnet build
      timeout-minutes: 5
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          make dotnet-build
    - name: Run ${{ matrix.configuration }} dotnet test
      timeout-minutes: 5
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          make dotnet-test
    - name: Run ${{ matrix.configuration }} dotnet pack test
      timeout-minutes: 5
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          make -C source/Mlos.NetCore.Components.Packages/
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          dotnet build external/ExternalIntegrationExample/ExternalIntegrationExample.SettingsRegistry/
    - name: Run ${{ matrix.configuration }} cmake build (CXX=${{ matrix.cxx }})
      timeout-minutes: 5
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          make cmake-build cmake-install
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          test -e target/bin/${{ matrix.configuration }}/x86_64/Mlos.UnitTest
    - name: Run ${{ matrix.configuration }} cmake test
      timeout-minutes: 5
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          make cmake-test
    - name: Run cake build
      timeout-minutes: 10
      shell: bash
      run: |
        docker exec mlos-${{ matrix.configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }} \
          ./build.linux.sh --Configuration=${{ matrix.configuration }}
    - name: Cleanup ${{ matrix.configuration }} docker instance for Ubuntu ${{ matrix.UbuntuVersion }}
      shell: bash
      run: |
        docker stop mlos-${{ matrix.Configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }}
        docker rm mlos-${{ matrix.Configuration }}-build-ubuntu-${{ matrix.UbuntuVersion }}

  # Check in-repo markdown links
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: yes
        folder-path: './documentation, ./build, ./source, ./test, ./scripts'
        file-path: './CODE_OF_CONDUCT.md, ./CONTRIBUTING.md, ./README.md, ./SECURITY.md'

  build-publish-website:
    name: Build and publish website
    needs: [prep-vars, docker-image-cached-build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # We only need to run this on one UbuntuVersion (latest), but reusing
        # the matrix like this allows for easier copy/paste of the build-setup
        # steps.
        UbuntuVersion: [20.04]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # "Fetch" the docker image precached by the "docker-image-cached-build" job that
    # we depend on by re-executing (roughly) its same steps.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      id: load-docker-cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Load the output cache from the docker-image-cached-build job.
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        #restore-keys: (no fallback)
    # To prevent race issues, abort if that fails.
    - name: Check for docker cache hit
      if: steps.load-docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Failed to load docker image cache from previous job.  Perhaps another workflow forced it out.  Please try again."
        exit 1
    - name: Import cached image
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        # For this target we can shave a small amount of time and only rebuild
        # up to the python stage - no need for dotnet, cmake, clang, etc. yet.
        target: mlos-build-base-with-python
        tags: mlos-build-python-${{ matrix.UbuntuVersion }}:${{ github.sha }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache
        load: true
    # Now start an instance of that container image.
    - name: Start docker instance
      shell: bash
      run: |
        docker run -it -d -v $PWD:/src/MLOS -u $UID \
          --name mlos-build-python \
          mlos-build-python-${{ matrix.UbuntuVersion }}:${{ github.sha }}
    - name: Setup local user in docker Container
      shell: bash
      run: |
        docker exec -u root mlos-build-python \
          /src/MLOS/scripts/setup-container-user.sh github-action-runner $(id -u) $(id -g)
    - name: Generate Python API docs using sphinx
      run: docker exec mlos-build-python make -C website sphinx-site
    - name: Generate main site from markdown using hugo
      run: docker exec mlos-build-python make -C website hugo-site
    - name: Test the links in the output site
      run: docker exec mlos-build-python make -C website link-check
    - name: Deploy to GitHub pages
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: JamesIves/github-pages-deploy-action@3.6.2
      with:
        BRANCH: gh-pages
        FOLDER: website/public
    - name: Cleanup docker instance
      shell: bash
      run: |
        docker stop mlos-build-python
        docker rm mlos-build-python

  # The licenseheaders check depends on comparing the source tree, so we keep it in a
  # separate pipeline to ensure it starts from a clean state.
  # For simplicity, we only run this one on ubuntu.

  python-licenseheaders-checks:
    name: Check for license header comments on python files
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install licenseheaders
    - name: Run licenseheaders tool and check to see if it caused any changes
      shell: bash
      run: |
        scripts/update-python-license-headers.sh
        # Note: licenseheaders currently rewrites the line-endings from crlf to lf,
        # so we instruct git-diff to ignore those when considering changes.
        git --no-pager diff --ignore-cr-at-eol --exit-code

  # FIXME: These timeouts are egregiously long right now.
  # See Also: https://github.com/microsoft/MLOS/pull/66#issuecomment-690760863
  windows-python-checks:
    name: Run Python checks on Windows
    runs-on: windows-2019
    timeout-minutes: 30
    strategy:
      matrix:
        # FIXME: MLOS currently fails pylint checks for 3.8
        # See Also: https://github.com/microsoft/MLOS/issues/54
        python-version: [3.7] #, 3.8]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest
        pip install -r source/Mlos.Python/requirements.txt
    - name: Run pylint checks (Windows)
      timeout-minutes: 2
      run: scripts\run-python-checks.cmd
    - name: Run Python unit tests (Windows)
      timeout-minutes: 30
      run: scripts\run-python-tests.cmd

  linux-python-checks:
    name: Run Python checks on Ubuntu ${{ matrix.UbuntuVersion }}
    runs-on: ubuntu-latest
    needs: [prep-vars, docker-image-cached-build]
    timeout-minutes: 30
    strategy:
      matrix:
        #UbuntuVersion: ${{ fromJson(needs.prep-vars.outputs.UbuntuVersionMatrix) }}
        UbuntuVersion: [20.04]
        # TODO: add support for checking different versions of Python
        # Right now, we install Python 3.7 in the container and default to
        # using it if available, else fallback to the system python3.
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # "Fetch" the docker image precached by the "docker-image-cached-build" job that
    # we depend on by re-executing (roughly) its same steps.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      id: load-docker-cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Load the output cache from the docker-image-cached-build job.
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        #restore-keys: (no fallback)
    # To prevent race issues, abort if that fails.
    - name: Check for docker cache hit
      if: steps.load-docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Failed to load docker image cache from previous job.  Perhaps another workflow forced it out.  Please try again."
        exit 1
    - name: Import cached image
      timeout-minutes: 10
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        # For this task we can get a slight speed up by skipping the dotnet,
        # clang, cmake layers.
        target: mlos-build-base-with-python
        tags: mlos-build-python-${{ matrix.UbuntuVersion }}:${{ github.sha }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache
        load: true
    # Now, start the image as a new container instance.
    - name: Start docker instance for Ubuntu ${{ matrix.UbuntuVersion }}
      # These images are expected to have installed all the pip dependencies already.
      shell: bash
      run: |
        docker run -it -d -v $PWD:/src/MLOS -u $UID \
          --name mlos-build-python-${{ matrix.UbuntuVersion }} \
          mlos-build-python-${{ matrix.UbuntuVersion }}:${{ github.sha }}
    - name: Setup local user in docker Container
      shell: bash
      run: |
        docker exec -u root mlos-build-python-${{ matrix.UbuntuVersion }} \
          /src/MLOS/scripts/setup-container-user.sh github-action-runner $(id -u) $(id -g)
    - name: Run pylint checks (Ubuntu ${{ matrix.UbuntuVersion }})
      timeout-minutes: 2
      run: docker exec mlos-build-python-${{ matrix.UbuntuVersion }} make python-checks
    - name: Run Python unit tests (Ubuntu ${{ matrix.UbuntuVersion }})
      timeout-minutes: 30
      run: docker exec mlos-build-python-${{ matrix.UbuntuVersion }} make python-test
    - name: Cleanup docker instance for Ubuntu ${{ matrix.UbuntuVersion }}
      shell: bash
      run: |
        docker stop mlos-build-python-${{ matrix.UbuntuVersion }}
        docker rm mlos-build-python-${{ matrix.UbuntuVersion }}

  docker-image-publish:
    name: Publish Ubuntu ${{ matrix.UbuntuVersion }} image
    # Only do this if this was a successful merge to the main branch.
    if: ${{ github.ref == 'refs/heads/main' }}
    # And make sure that all of the other tests have passed first.
    needs: [prep-vars, docker-image-fresh-build, docker-image-cached-build, linux-build-test, linux-python-checks, build-publish-website]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        UbuntuVersion: ${{ fromJson(needs.prep-vars.outputs.UbuntuVersionMatrix) }}
    env:
      MLOS_GCR_USR: ${{ secrets.MLOS_GCR_USR }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # "Fetch" the docker image precached by the "docker-image-cached-build" job that
    # we depend on by re-executing (roughly) its same steps.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      timeout-minutes: 5
      id: load-docker-cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        # Load the output cache from the docker-image-cached-build job.
        key: mlos-buildx-${{ matrix.UbuntuVersion }}-${{ needs.prep-vars.outputs.utc-date }}-${{ github.sha }}
        #restore-keys: (no fallback)
    # To prevent race issues, abort if that fails.
    - name: Check for docker cache hit
      if: steps.load-docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Failed to load docker image cache from previous job.  Perhaps another workflow forced it out.  Please try again."
        exit 1
    - name: Import cached image
      timeout-minutes: 5
      uses: docker/build-push-action@v2
      with:
        build-args: UbuntuVersion=${{ matrix.UbuntuVersion }}
        target: mlos-build-base-without-extras
        # Add the :latest tag.
        tags: |
          mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }}
          mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
        # Add some labels for publishing.
        labels: |
          org.opencontainers.image.title=mlos-build-ubuntu-${{ matrix.UbuntuVersion }}
          org.opencontainers.image.description="MLOS build environment for Ubuntu ${{ matrix.UbuntuVersion }}"
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ needs.prep-vars.outputs.utc-ts }}
        cache-from: type=local,src=/tmp/.buildx-cache
        #cache-to: type=local,dest=/tmp/.buildx-cache
        load: true
    # Now we can push the image to the local docker package repository.
    # Note: Although this works well with the built in GITHUB_TOKEN secret,
    # it requires a "docker login" to be able to pull (no anonymous pulls).
    - name: Github Docker Package Registry Login
      uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push the docker image to this repo's github docker package registry
      timeout-minutes: 15
      shell: bash
      # We only push to the :latest tag, to avoid needing to cleanup the
      # registry manually (there's currently no API for that).
      run: |
        docker tag mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }} \
          docker.pkg.github.com/${{ needs.prep-vars.outputs.repository-name-tolower }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
        docker push docker.pkg.github.com/${{ needs.prep-vars.outputs.repository-name-tolower }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
    # Optionally push to the new Github Container Registry service, if the
    # current repo has the appropriate personal access token secrets setup.
    # This service allows anonymous pulls.
    - id: get-gcr-reg
      name: Compute Github Docker Container Registry service Registry Name
      shell: bash
      # If specified, the current repo can override the computed registry path with a secret (which isn't really secret).
      # For, the production Microsoft/MLOS repo, we currently set the ghcr.io path to microsoft-cisl/mlos.
      run: |
        if [ -n "${{ secrets.MLOS_GCR_REG }}" ]; then
          echo "::set-output name=name::${{ secrets.MLOS_GCR_REG }}" | tr A-Z a-z
        else
          echo "::set-output name=name::${{ needs.prep-vars.outputs.repository-name-tolower }}"
        fi
    - name: Github Docker Container Registry Login
      if: ${{ env.MLOS_GCR_USR != '' }}
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ secrets.MLOS_GCR_USR }}
        password: ${{ secrets.MLOS_GCR_PAT }}
    - name: Push the docker image to this repo's github docker container registry service
      if: ${{ env.MLOS_GCR_USR != '' }}
      timeout-minutes: 15
      shell: bash
      # We only push to the :latest tag, to avoid needing to cleanup the
      # registry manually (there's currently no API for that).
      run: |
        docker tag mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:${{ github.sha }} \
          ghcr.io/${{ steps.get-gcr-reg.outputs.name }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
        docker push ghcr.io/${{ steps.get-gcr-reg.outputs.name }}/mlos-build-ubuntu-${{ matrix.UbuntuVersion }}:latest
