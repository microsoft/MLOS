# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run the debug/retail msbuild jobs separately so they can be executed in parallel.

  windows-msbuild:
    name: Run ${{ matrix.configuration }} msbuild on Windows
    runs-on: windows-2019
    timeout-minutes: 20
    strategy:
      matrix:
        configuration: [Debug, Release]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # Runs multiple commands using the runners shell
    - name: Run ${{ matrix.configuration }} msbuild
      timeout-minutes: 15
      shell: cmd
      run: |
        set Configuration=${{ matrix.configuration }}
        scripts\build.windows.cmd

  linux-build-test:
    name: ${{ matrix.configuration }} build/test C++/C# on Linux
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        configuration: [Debug, Release]
    steps:
      - name: Install apt dependencies
        run: sudo apt-get -y install build-essential clang-10 curl liblttng-ctl0 liblttng-ust0 libxml2 zlib1g
      - uses: actions/checkout@v2
      - name: Run ${{ matrix.configuration }} dotnet build
        timeout-minutes: 5
        shell: bash
        run: CONFIGURATION=${{ matrix.configuration }} make dotnet-build
      - name: Run ${{ matrix.configuration }} dotnet test
        timeout-minutes: 5
        shell: bash
        run: CONFIGURATION=${{ matrix.configuration }} make dotnet-test
      - name: Run ${{ matrix.configuration }} cmake build
        timeout-minutes: 5
        shell: bash
        run: CONFIGURATION=${{ matrix.configuration }} make cmake-build
      - name: Run ${{ matrix.configuration }} cmake test
        timeout-minutes: 5
        shell: bash
        run: CONFIGURATION=${{ matrix.configuration }} make cmake-test
      - name: Run cake build
        timeout-minutes: 10
        shell: bash
        run: ./build.linux.sh

  # The licenseheaders check depends on comparing the source tree, so we keep it in a
  # separate pipeline to ensure it starts from a clean state.
  # For simplicity, we only run this one on ubuntu.

  python-licenseheaders-checks:
    name: Check for license header comments on python files
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install licenseheaders
    - name: Run licenseheaders tool and check to see if it caused any changes
      shell: bash
      run: |
        scripts/update-python-license-headers.sh
        # Note: licenseheaders currently rewrites the line-endings from crlf to lf,
        # so we instruct git-diff to ignore those when considering changes.
        git --no-pager diff --ignore-cr-at-eol --exit-code

  # Check in-repo markdown links
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: yes
        folder-path: './documentation, ./build, ./source, ./test, ./scripts'
        file-path: './CODE_OF_CONDUCT.md, ./CONTRIBUTING.md, ./README.md, ./SECURITY.md'

  build-publish-website:
    name: Build and publish website
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.1
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install apt dependencies
      run: sudo apt-get -y install build-essential libfreetype-dev unixodbc-dev hugo
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        python -m pip install --upgrade pyyaml
    - name: Generate Python API docs using sphinx
      run: make -C website sphinx-site
    - name: Generate main site from markdown using hugo
      run: make -C website hugo-site
    - name: Test the links in the output site
      run: make -C website link-check
    - name: Deploy to GitHub pages
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: JamesIves/github-pages-deploy-action@3.5.9
      with:
        BRANCH: gh-pages
        FOLDER: website/public

  # FIXME: These timeouts are egregiously long right now.
  # See Also: https://github.com/microsoft/MLOS/pull/66#issuecomment-690760863
  python-checks:
    name: Run Python checks
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04]
        # FIXME: MLOS currently fails pylint checks for 3.8
        # See Also: https://github.com/microsoft/MLOS/issues/54
        python-version: [3.7] #, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install apt dependencies
      if: startsWith(matrix.os, 'ubuntu')
      # pip needs some additional libraries on linux:
      run: sudo apt-get -y install build-essential libfreetype-dev unixodbc-dev
    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r source/Mlos.Python/requirements.txt
    - name: Run pylint checks (Windows)
      if: startsWith(matrix.os, 'windows')
      timeout-minutes: 2
      run: scripts\run-python-checks.cmd
    - name: Run pylint checks (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      timeout-minutes: 2
      run: scripts/run-python-checks.sh
    - name: Run Python unit tests (Windows)
      if: startsWith(matrix.os, 'windows')
      timeout-minutes: 75
      run: scripts\run-python-tests.cmd
    - name: Run Python unit tests (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      timeout-minutes: 75
      run: scripts/run-python-tests.sh
