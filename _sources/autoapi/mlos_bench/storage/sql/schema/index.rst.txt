mlos_bench.storage.sql.schema
=============================

.. py:module:: mlos_bench.storage.sql.schema

.. autoapi-nested-parse::

   DB schema definition for the :py:class:`~mlos_bench.storage.sql.storage.SqlStorage`
   backend.

   .. rubric:: Notes

   The SQL statements are generated by SQLAlchemy, but can be obtained using
   ``repr`` or ``str`` (e.g., via ``print()``) on this object.
   The ``mlos_bench`` CLI will do this automatically if the logging level is set to
   ``DEBUG``.

   Also see the `mlos_bench CLI usage <../../../../../mlos_bench.run.usage.html>`__ for
   details on how to invoke only the schema creation/update routines.



Classes
-------

.. autoapisummary::

   mlos_bench.storage.sql.schema.DbSchema


Module Contents
---------------

.. py:class:: DbSchema(engine: sqlalchemy.engine.Engine)

   A class to define and create the DB schema.

   Declare the SQLAlchemy schema for the database.

   :param engine:
   :type engine: sqlalchemy.engine.Engine


   .. py:method:: __repr__() -> str

      Produce a string with all SQL statements required to create the schema from
      scratch in current SQL dialect.

      That is, return a collection of CREATE TABLE statements and such.
      NOTE: this method is quite heavy! We use it only once at startup
      to log the schema, and if the logging level is set to DEBUG.

      :returns: **sql** -- A multi-line string with SQL statements to create the DB schema from scratch.
      :rtype: str



   .. py:method:: create() -> DbSchema

      Create the DB schema.



   .. py:method:: drop_all_tables(*, force: bool = False) -> None

      Helper method used in testing to reset the DB schema.

      .. rubric:: Notes

      This method is not intended for production use, as it will drop all tables
      in the database. Use with caution.

      :param force: If True, drop all tables in the target database.
                    If False, this method will not drop any tables and will log a warning.
      :type force: bool



   .. py:method:: update() -> DbSchema

      Updates the DB schema to the latest version.

      .. rubric:: Notes

      Also see the `mlos_bench CLI usage <../../../../../mlos_bench.run.usage.html>`__
      for details on how to invoke only the schema creation/update routines.



   .. py:attribute:: config

      The Table storing
      :py:class:`~mlos_bench.storage.base_tunable_config_data.TunableConfigData`
      info.


   .. py:attribute:: config_param

      The Table storing
      :py:class:`~mlos_bench.storage.base_tunable_config_data.TunableConfigData`
      info.


   .. py:attribute:: experiment

      The Table storing
      :py:class:`~mlos_bench.storage.base_experiment_data.ExperimentData` info.


   .. py:property:: meta
      :type: sqlalchemy.MetaData


      Return the SQLAlchemy MetaData object.


   .. py:attribute:: objectives

      The Table storing
      :py:class:`~mlos_bench.storage.base_storage.Storage.Experiment` optimization
      objectives info.


   .. py:attribute:: trial

      The Table storing :py:class:`~mlos_bench.storage.base_trial_data.TrialData`
      info.


   .. py:attribute:: trial_param

      The Table storing :py:class:`~mlos_bench.storage.base_trial_data.TrialData`
      :py:attr:`metadata <mlos_bench.storage.base_trial_data.TrialData.metadata_dict>`
      info.


   .. py:attribute:: trial_result

      The Table storing :py:class:`~mlos_bench.storage.base_trial_data.TrialData`
      :py:attr:`results <mlos_bench.storage.base_trial_data.TrialData.results_dict>`
      info.


   .. py:attribute:: trial_status

      The Table storing :py:class:`~mlos_bench.storage.base_trial_data.TrialData`
      :py:class:`~mlos_bench.environments.status.Status` info.


   .. py:attribute:: trial_telemetry

      The Table storing :py:class:`~mlos_bench.storage.base_trial_data.TrialData`
      :py:attr:`telemetry <mlos_bench.storage.base_trial_data.TrialData.telemetry_df>`
      info.


