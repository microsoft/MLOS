#
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#
"""
Unit tests for mock mlos_bench optimizer.
"""
import os
import sys
import shutil

import pytest

from mlos_bench.util import path_join
from mlos_bench.optimizers.mlos_core_optimizer import MlosCoreOptimizer
from mlos_bench.tunables.tunable_groups import TunableGroups

from mlos_bench.tests import SEED

from mlos_core.optimizers.bayesian_optimizers.smac_optimizer import SmacOptimizer

_OUTPUT_DIR_PATH_BASE = r'c:/temp' if sys.platform == 'win32' else '/tmp/'
_OUTPUT_DIR = '_test_output_dir'  # Will be deleted after the test.


def test_init_mlos_core_smac_opt_bad_trial_count(tunable_groups: TunableGroups) -> None:
    """
    Test invalid max_trials initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'max_trials': 10,
        'max_suggestions': 11,
        'seed': SEED,
    }
    with pytest.raises(AssertionError):
        opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
        assert opt is None


def test_init_mlos_core_smac_opt_max_trials(tunable_groups: TunableGroups) -> None:
    """
    Test max_trials initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'max_suggestions': 123,
        'seed': SEED,
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    assert opt._opt.base_optimizer.scenario.n_trials == test_opt_config['max_suggestions']


def test_init_mlos_core_smac_absolute_output_directory(tunable_groups: TunableGroups) -> None:
    """
    Test absolute path output directory initialization of mlos_core SMAC optimizer.
    """
    output_dir = path_join(_OUTPUT_DIR_PATH_BASE, _OUTPUT_DIR)
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'output_directory': output_dir,
        'seed': SEED,
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
    assert isinstance(opt, MlosCoreOptimizer)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    # Final portions of the path are generated by SMAC when run_name is not specified.
    assert path_join(str(opt._opt.base_optimizer.scenario.output_directory)).startswith(
        str(test_opt_config['output_directory']))
    shutil.rmtree(output_dir)


def test_init_mlos_core_smac_relative_output_directory(tunable_groups: TunableGroups) -> None:
    """
    Test relative path output directory initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'output_directory': _OUTPUT_DIR,
        'seed': SEED,
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
    assert isinstance(opt, MlosCoreOptimizer)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    assert path_join(str(opt._opt.base_optimizer.scenario.output_directory)).startswith(
        path_join(os.getcwd(), str(test_opt_config['output_directory'])))
    shutil.rmtree(_OUTPUT_DIR)


def test_init_mlos_core_smac_relative_output_directory_with_run_name(tunable_groups: TunableGroups) -> None:
    """
    Test relative path output directory initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'output_directory': _OUTPUT_DIR,
        'run_name': 'test_run',
        'seed': SEED,
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
    assert isinstance(opt, MlosCoreOptimizer)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    assert path_join(str(opt._opt.base_optimizer.scenario.output_directory)).startswith(
        path_join(os.getcwd(), str(test_opt_config['output_directory']), str(test_opt_config['run_name'])))
    shutil.rmtree(_OUTPUT_DIR)


def test_init_mlos_core_smac_relative_output_directory_with_experiment_id(tunable_groups: TunableGroups) -> None:
    """
    Test relative path output directory initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'output_directory': _OUTPUT_DIR,
        'seed': SEED,
    }
    global_config = {
        'experiment_id': 'experiment_id',
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config, global_config)
    assert isinstance(opt, MlosCoreOptimizer)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    assert path_join(str(opt._opt.base_optimizer.scenario.output_directory)).startswith(
        path_join(os.getcwd(), str(test_opt_config['output_directory']), global_config['experiment_id']))
    shutil.rmtree(_OUTPUT_DIR)


def test_init_mlos_core_smac_temp_output_directory(tunable_groups: TunableGroups) -> None:
    """
    Test random output directory initialization of mlos_core SMAC optimizer.
    """
    test_opt_config = {
        'optimizer_type': 'SMAC',
        'output_directory': None,
        'seed': SEED,
    }
    opt = MlosCoreOptimizer(tunable_groups, test_opt_config)
    assert isinstance(opt, MlosCoreOptimizer)
    # pylint: disable=protected-access
    assert isinstance(opt._opt, SmacOptimizer)
    assert opt._opt.base_optimizer.scenario.output_directory is not None
