#
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#
"""
Support fractional seconds with MySQL.

Revision ID: b61aa446e724
Revises: 8928a401115b
Create Date: 2025-06-02 17:56:34.746642+00:00
"""
# pylint: disable=no-member

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import context, op
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "b61aa446e724"
down_revision: str | None = "8928a401115b"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def _mysql_datetime(*, with_fsp: bool = False) -> mysql.DATETIME:
    """
    Return a MySQL DATETIME type with fractional seconds precision (fsp=6).

    Notes
    -----
    Split out to allow single mypy ignore.
    See <https://github.com/sqlalchemy/sqlalchemy/pull/12164> for details.
    """
    if with_fsp:
        return mysql.DATETIME(fsp=6)  # type: ignore[no-untyped-call]
    return mysql.DATETIME()  # type: ignore[no-untyped-call]


def upgrade() -> None:
    """The schema upgrade script for this revision."""
    bind = context.get_bind()
    if bind.dialect.name == "mysql":
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column(
            "experiment",
            "ts_start",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=True,
        )
        op.alter_column(
            "experiment",
            "ts_end",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=True,
        )
        op.alter_column(
            "trial",
            "ts_start",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=False,
        )
        op.alter_column(
            "trial",
            "ts_end",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=True,
        )
        op.alter_column(
            "trial_status",
            "ts",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=False,
        )
        op.alter_column(
            "trial_telemetry",
            "ts",
            existing_type=_mysql_datetime(),
            type_=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            existing_nullable=False,
        )
        # ### end Alembic commands ###


def downgrade() -> None:
    """The schema downgrade script for this revision."""
    bind = context.get_bind()
    if bind.dialect.name == "mysql":
        # ### commands auto generated by Alembic - please adjust! ###
        op.alter_column(
            "trial_telemetry",
            "ts",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=False,
        )
        op.alter_column(
            "trial_status",
            "ts",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=False,
        )
        op.alter_column(
            "trial",
            "ts_end",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=True,
        )
        op.alter_column(
            "trial",
            "ts_start",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=False,
        )
        op.alter_column(
            "experiment",
            "ts_end",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=True,
        )
        op.alter_column(
            "experiment",
            "ts_start",
            existing_type=sa.DateTime(timezone=True).with_variant(
                _mysql_datetime(with_fsp=True),
                "mysql",
            ),
            type_=_mysql_datetime(),
            existing_nullable=True,
        )
        # ### end Alembic commands ###
