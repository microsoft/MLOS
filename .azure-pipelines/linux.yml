name: 'MlosCore Linux'

trigger:
- main

pr:
  branches:
    include:
    - '*'

schedules:
- cron: "0 0 * * *"
  displayName: Nightly build
  branches:
    include:
    - main
  always: "true"

jobs:
- job: 'Linux'

  pool:
    vmImage: ubuntu-latest

  # Test multiple versions of python.
  strategy:
    matrix:
      DefaultPython:
        # Floating most recent version of python (useful to catch new compatibility issues in nightly builds).
        conda_env: 'mlos_core'
  # Python 3.6 is currently incompatible.
  #   Python36:
  #     conda_env: 'mlos_core-3.6'
      Python38:
        conda_env: 'mlos_core-3.8'
      Python39:
        conda_env: 'mlos_core-3.9'
      Python310:
        conda_env: 'mlos_core-3.10'
      # FIXME: There are currently several missing/broken dependencies for python 3.11.
      #Python311:
      #  conda_env: 'mlos_core-3.11'

  variables:
    - name: CONDA_CACHE_DIR
      value: "/usr/share/miniconda/envs/$(conda_env)"
      #value: "/usr/share/miniconda/envs"
    - name: cache_cur_date
      value: "0000-00-00"
    - name: cache_cur_hour
      value: "00"
    - name: cache_prev_hour
      value: "23"

  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: 'Add conda to PATH'
  - bash: |
      echo "##vso[task.setvariable variable=cache_cur_date;]`date +%Y-%m-%d`"
      echo "##vso[task.setvariable variable=cache_cur_hour;]`date +%H`"
      echo "##vso[task.setvariable variable=cache_prev_hour;]`date -d'1 hour ago' +%H`"
    displayName: 'Set cache timestamp variables'
  - bash: |
      echo "cache_cur_date: $(cache_cur_date)"
      echo "cache_cur_hour: $(cache_cur_hour)"
      echo "cache_prev_hour: $(cache_prev_hour)"
      echo "CONDA_CACHE_DIR: $(CONDA_CACHE_DIR)"
    displayName: 'Print some pipeline variables'
  - task: Cache@2
    displayName: Restore cached conda environment
    inputs:
      key: 'conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env).yml | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_cur_hour)" | .azure-pipelines/linux.yml'
      path: $(CONDA_CACHE_DIR)
      # Prefer cached environments from the last hour or day.
      restoreKeys: |
        conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env).yml | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_cur_hour)"
        conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env).yml | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_prev_hour)"
  #     conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env).yml | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)"
      cacheHitVar: CONDA_CACHE_RESTORED

  - bash: |
      set -x
      printenv
    displayName: 'Log some environment variables for debugging'

  - bash: |
      conda config --set channel_priority strict
      #conda update -v -y -n base conda
    displayName: Update and configure conda

  # Try and speed up the pipeline by using a faster solver:
  - bash: |
      conda install -v -y -n base conda-libmamba-solver
      # Try to set either of the configs for the solver.
      conda config --set experimental_solver libmamba || true
      conda config --set solver libmamba || true
      echo "##vso[task.setvariable variable=CONDA_EXPERIMENTAL_SOLVER;]libmamba"
      echo "##vso[task.setvariable variable=EXPERIMENTAL_SOLVER;]libmamba"
    displayName: Install and default to mamba solver
  - bash: rm -f /usr/share/miniconda/pkgs/cache/*.json
    displayName: Workaround a mamba cache bug in ADO
    # https://github.com/mamba-org/mamba/issues/488

  - bash: make CONDA_ENV_NAME=$(conda_env) CONDA_INFO_LEVEL=-v conda-env
    displayName: 'Create/update mlos_core conda environment'

  - bash: conda run -n $(conda_env) pip install pytest-azurepipelines
    displayName: 'Install pytest-azurepipelines'

  # This is moreso about code cleanliness, which is a dev thing, not a
  # functionality thing, and the rules for that change between python versions,
  # so only do this for the default in the devcontainer.
  #- bash: make CONDA_ENV_NAME=$(conda_env) check
  #  displayName: 'Run lint checks'
  - bash: make CONDA_ENV_NAME=$(conda_env) test
    displayName: 'Run tests'

  - bash: make CONDA_ENV_NAME=$(conda_env) CONDA_INFO_LEVEL=-v dist dist-test
    displayName: 'Generate and test binary distribution files'

- job: DevContainer
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    DOCKER_BUILDKIT: 1
    BUILDKIT_INLINE_CACHE: 1
  steps:
  - bash: |
      set -x
      printenv
    displayName: 'Log some environment variables for debugging'
  - bash: |
      if [ "$(Build.Reason)" == "Schedule" ]; then
        echo "##vso[task.setvariable variable=NO_CACHE;]true"
      fi
    displayName: 'Set NO_CACHE variable for nightly builds'
  - bash: |
      set -x
      echo "NO_CACHE: $NO_CACHE"
      .devcontainer/build/build-devcontainer.sh
    displayName: 'Build the devcontainer image'

  - bash: |
      set -x
      docker run -d --rm --user root \
        --env SYSTEM_JOBDISPLAYNAME=$(System.JobDisplayName) \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --env DOCKER_BUILDKIT=$(DOCKER_BUILDKIT) \
        --volume $(pwd):/workspaces/MlosCore \
        --env CONTAINER_WORKSPACE_FOLDER=/workspaces/MlosCore \
        --env LOCAL_WORKSPACE_FOLDER=$(pwd) \
        --workdir /workspaces/MlosCore \
        --name mlos-core-devcontainer mlos-core-devcontainer sleep infinity
    displayName: 'Start the devcontainer in the background'
  - bash: |
      set -x
      docker exec --user root mlos-core-devcontainer groupmod -g `id -g` vscode
      docker exec --user root mlos-core-devcontainer usermod -u `id -u` -g `id -g` vscode
      docker exec --user root mlos-core-devcontainer chown -R vscode:vscode /home/vscode
      docker exec --user root mlos-core-devcontainer mkdir -p /opt/conda/pkgs/cache /var/cache/pip
      docker exec --user root mlos-core-devcontainer chown -R vscode /opt/conda/pkgs/cache /var/cache/pip
    displayName: 'Fixup vscode uid/gid in the running container'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v licenseheaders
      # licenseheaders changes the contents of the files, so make this check fail if there are any changes detected
      git diff --no-pager --exit-code
    displayName: 'Check that all of the python files have licenseheaders'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v conda-env
    displayName: 'Update the conda env in the devcontainer'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer conda run -n mlos_core pip install pytest-azurepipelines
    displayName: 'Install pytest-azurepipelines'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v check
    displayName: 'Run lint checks'
  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v test
    displayName: 'Run tests'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v dist dist-test
    displayName: 'Generate and test binary distribution files'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v devcontainer
    displayName: 'Test rebuilding the devcontainer in the devcontainer'

  - bash: |
      set -x
      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v doc
    displayName: 'Generate docs and test check them'
  - task: AzureStaticWebApp@0
    # Only publish docs on the main branch.
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: 'Publish documentation'
    inputs:
      app_location: '/doc/build/html'
      api_location: 'api'
      output_location: '/'
      azure_static_web_apps_api_token: $(deployment_token)

  - publish: $(System.DefaultWorkingDirectory)/doc/source/badges/coverage.svg
    artifact: coverage-status-badge
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: 'Publish the coverage status badge'

  - bash: |
      set -x
      docker stop -t 1 mlos-core-devcontainer || true
      docker rm --force mlos-core-devcontainer || true
    displayName: 'Cleanup the devcontainer'

  - bash: |
      echo $(ACR_PASSWORD) | docker login --username $(ACR_USERNAME) --password-stdin $(ACR_LOGINURL)
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['ACR_LOGINURL'], ''))
    displayName: Login to ACR
  - bash: |
      set -x
      docker tag devcontainer-cli $(ACR_LOGINURL)/devcontainer-cli
      docker push $(ACR_LOGINURL)/devcontainer-cli
      docker tag mlos-core-devcontainer $(ACR_LOGINURL)/mlos-core-devcontainer
      docker push $(ACR_LOGINURL)/mlos-core-devcontainer
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['ACR_LOGINURL'], ''))
    displayName: Push Docker images
