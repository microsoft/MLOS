parameters:
  name: 'Windows'

jobs:
- job: ${{ parameters.name }}

  pool:
    vmImage: windows-latest

  # Test multiple versions of python.
  strategy:
    matrix:
      DefaultPython:
        # Floating most recent version of python (useful to catch new compatibility issues in nightly builds).
        conda_env: 'mlos_core'
        conda_env_yml: 'mlos_core-windows.yml'
        PythonVersion: ''
  # Skipping testing of additional versions on Windows for now.

  variables:
    - name: CONDA_CACHE_DIR
      value: $(CONDA)/envs/$(conda_env)
      #value: $(CONDA)/envs
    - name: cache_cur_date
      value: "0000-00-00"
    - name: cache_cur_hour
      value: "00"
    - name: cache_prev_hour
      value: "23"

  steps:
  - pwsh: |
      Write-Host "##vso[task.prependpath]$env:CONDA\condabin"
      Write-Host "##vso[task.prependpath]$env:CONDA\bin"
      Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      Write-Host "##vso[task.prependpath]$env:CONDA\Library\bin"
      Write-Host "##vso[task.prependpath]$env:CONDA\Library\usr\bin"
      Write-Host "##vso[task.prependpath]$env:CONDA\Library\mingw-w64\bin"
      Write-Host "##vso[task.prependpath]$env:CONDA"
    displayName: Add conda to PATH

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=cache_cur_date;]" (Get-Date -Format yyyy-MM-dd)
      Write-Host "##vso[task.setvariable variable=cache_cur_hour;]" (Get-Date -Format HH)
      Write-Host "##vso[task.setvariable variable=cache_prev_hour;]" (Get-Date).AddHours(-1).ToString('HH')
    displayName: 'Set cache timestamp variables'
  - pwsh: |
      echo "cache_cur_date: $(cache_cur_date)"
      echo "cache_cur_hour: $(cache_cur_hour)"
      echo "cache_prev_hour: $(cache_prev_hour)"
      echo "CONDA_CACHE_DIR: $(CONDA_CACHE_DIR)"
      echo "CONDA: $env:CONDA"
      echo "CONDA_PREFIX: $env:CONDA_PREFIX"
      echo "CONDA_ROOT: $env:CONDA_ROOT"
      echo "PATH: $env:PATH"
    displayName: 'Print some pipeline and environment variables'
  - task: Cache@2
    displayName: Restore cached conda environment
    inputs:
      key: 'conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env_yml) | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_cur_hour)" | azure-pipelines.yml | .azure-pipelines/windows.yml'
      path: $(CONDA_CACHE_DIR)
      # Prefer cached environments from the last hour or day.
      restoreKeys: |
        conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env_yml) | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_cur_hour)"
        conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env_yml) | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)" | "$(cache_prev_hour)"
  #     conda | "$(Agent.OS)" | "$(conda_env)" | conda-envs/$(conda_env_yml) | mlos_core/setup.py | mlos_bench/setup.py | "$(cache_cur_date)"
      cacheHitVar: CONDA_CACHE_RESTORED

  # NOTE: these steps are handled by the Makefile in Linux environments for reusability.

  - pwsh: |
      conda config --set channel_priority strict
      #conda update -v -y -n base conda
    displayName: Update and configure conda

  # Try and speed up the pipeline by using a faster solver:
  - pwsh: |
      conda install -v -y -n base conda-libmamba-solver
      conda config --set experimental_solver libmamba
      conda config --set solver libmamba
      Write-Host "##vso[task.setvariable variable=CONDA_EXPERIMENTAL_SOLVER;]libmamba"
      Write-Host "##vso[task.setvariable variable=EXPERIMENTAL_SOLVER;]libmamba"
    ignoreLASTEXITCODE: true
    errorActionPreference: continue
    displayName: Install and default to experimental mamba solver
  - pwsh: Remove-Item -Recurse -Force $env:CONDA\pkgs\cache\*.json
    displayName: Workaround a mamba cache bug in ADO
    # https://github.com/mamba-org/mamba/issues/488

  - pwsh: |
      if (! (conda env list | Select-String -Pattern "^$(conda_env) ") ) { conda env create -v -n $(conda_env) -f conda-envs/$(conda_env_yml) }
      conda env update -v -n $(conda_env) -f conda-envs/$(conda_env_yml) --prune
    displayName: 'Create/update mlos_core conda environment'

  - pwsh: conda run -n $(conda_env) pip install pytest-azurepipelines
    displayName: 'Install pytest-azurepipelines'

  - pwsh: conda run -n $(conda_env) pylint -j0 mlos_core/mlos_core mlos_bench/mlos_bench
    displayName: 'Run lint checks'
  - pwsh: |
      conda run -n $(conda_env) pytest mlos_core/ mlos_bench/
    displayName: 'Run tests'

  # Note: unlike the Makefile version, the pwsh version of these rules are all run within a single shell context, so we can
  # split commands across lines with CWD maintained (hence we also require the "cd .." here).
  - pwsh: |
      # Build the mlos_core wheel.
      cd mlos_core
      conda run -n $(conda_env) python setup.py bdist_wheel
      cd ..
      $mlos_core_whl = (Resolve-Path mlos_core/dist/mlos_core-*-py3-none-any.whl | Select-Object -ExpandProperty Path)
      echo $mlos_core_whl
      # Build the mlos_bench wheel.
      cd mlos_bench
      conda run -n $(conda_env) python setup.py bdist_wheel
      cd ..
      $mlos_bench_whl = (Resolve-Path mlos_bench/dist/mlos_bench-*-py3-none-any.whl | Select-Object -ExpandProperty Path)
      echo $mlos_bench_whl
      # Setup a clean environment to test installing/using them.
      $PythonVersReq = (conda list -n $(conda_env) | Select-String -AllMatches -Pattern '^python\s+([0-9.]+)\s+').Matches.Groups[1].Value
      conda create -y -v -n mlos-dist-test-$(PythonVersion) python=${PythonVersReq}
      conda install -y -v -n mlos-dist-test-$(PythonVersion) vswhere vs2019_win-64
      conda install -y -v -n mlos-dist-test-$(PythonVersion) conda-forge::GPy
      conda run -n mlos-dist-test-$(PythonVersion) pip install pytest pytest-timeout pytest-forked pytest-xdist
      # Install mlos_core wheel.
      conda run -n mlos-dist-test-$(PythonVersion) pip install "${mlos_core_whl}[full]"
      # Install mlos_bench wheel.
      conda run -n mlos-dist-test-$(PythonVersion) pip install "${mlos_bench_whl}[full]"
      # Just pick one simple test to run for now.
      # The rest should have been handled in a separate step.
      conda run -n mlos-dist-test-$(PythonVersion) python -m pytest mlos_core/mlos_core/tests/spaces/spaces_test.py
      # Run a simple mlos_bench test.
      conda run -n mlos-dist-test-$(PythonVersion) python -m pytest mlos_bench/mlos_bench/tests/environment/mock_env_test.py
    displayName: 'Generate and test binary distribution files'

# NOTE: Windows ADO agents don't support Linux Docker containers.
# This will have to be tested manually for now using the ".devcontainer/build/build-devcontainer.ps1" script.
#
#- job: WindowsDevContainer
#  pool:
#    vmImage: windows-latest
#  steps:
#  - pwsh: |
#      if ("$(Build.Reason)" -eq "Schedule") {
#        Write-Host "##vso[task.setvariable variable=NO_CACHE;]true"
#      }
#    displayName: 'Set NO_CACHE variable for nightly builds'
#  - pwsh: |
#      Write-Host "NO_CACHE: $env:NO_CACHE"
#      .devcontainer/build/build-devcontainer.ps1
#    displayName: 'Build devcontainer in Windows'
#  - pwsh: |
#      docker run -d --rm --user root `
#        --volume /var/run/docker.sock:/var/run/docker.sock `
#        --volume ${PWD}:/workspaces/MlosCore \
#        --env CONTAINER_WORKSPACE_FOLDER=/workspaces/MlosCore \
#        --env LOCAL_WORKSPACE_FOLDER=${PWD} \
#        --workdir /workspaces/MlosCore \
#        --name mlos-core-devcontainer mlos-core-devcontainer sleep infinity
#    displayName: 'Start the devcontainer in the background'
#
#  - pwsh: |
#      docker exec --user vscode mlos-core-devcontainer make CONDA_INFO_LEVEL=-v conda-env
#    displayName: 'Update the conda env in the devcontainer'
#
#  - pwsh: |
#      docker exec --user vscode mlos-core-devcontainer conda run -n $(conda_env) pip show mlos_core
#      docker exec --user vscode mlos-core-devcontainer conda run -n $(conda_env) pip show mlos_bench
#    displayName: 'Basic devcontainer test'
#
#  # Skip other tests - they should get run identically in the Linux job.
#
#  - pwsh: |
#      docker stop -t 1 mlos-core-devcontainer || true
#      docker rm --force mlos-core-devcontainer || true
#    displayName: 'Cleanup the devcontainer'
#    ignoreLASTEXITCODE: true
