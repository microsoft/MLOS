# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
default_stages: [pre-commit]

# Note "require_serial" actually controls whether that particular hook's files
# are partitioned and the hook executable called in parallel across them, not
# whether hooks themselves are parallelized.
# As such, some hooks (e.g., pylint) which do internal parallelism need it set
# for effeciency and correctness anyways.

repos:
#
# Formatting
#
# NOTE: checks that adjust files are marked with the special "manual" stage so
# that we can easily call them via `make`.
#
#
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
    -   id: check-added-large-files
#   -   id: check-executables-have-shebangs (issues in devcontainer)
    -   id: check-merge-conflict
    -   id: check-toml
    -   id: check-yaml
    -   id: end-of-file-fixer
        stages: [pre-commit, manual]
    # TODO:
    #-   id: pretty-format-json
    #    args: [--autofix, --no-sort-keys]
    #    stages: [pre-commit, manual]
    -   id: trailing-whitespace
        stages: [pre-commit, manual]
-   repo: https://github.com/johann-petrak/licenseheaders
    rev: v0.8.8
    hooks:
    -   id: licenseheaders
        files: '\.(sh|cmd|ps1|sql|py)$'
        args: [-t, doc/mit-license.tmpl, -E, .py, .sh, .ps1, .sql, .cmd, -x, mlos_bench/setup.py, mlos_core/setup.py, mlos_viz/setup.py, -f]
        stages: [pre-commit, manual]
-   repo: https://github.com/asottile/pyupgrade
    rev: v3.19.1
    hooks:
    -   id: pyupgrade
        args: [--py310-plus]
        stages: [pre-commit, manual]
-   repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
    -   id: isort
        require_serial: true
        args: ["-j", "-1"]
        stages: [pre-commit, manual]
-   repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
    -   id: black
        stages: [pre-commit, manual]
-   repo: https://github.com/PyCQA/docformatter
    rev: 06907d0 # v1.7.5
    hooks:
    -   id: docformatter
        stages: [pre-commit, manual]
#
# Linting
#
-   repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
    - id: pydocstyle
      types: [python]
      additional_dependencies:
        - tomli
# Use pylint and mypy from the local (conda) environment so that vscode can reuse them too.
-   repo: local
    hooks:
    -   id: pycodestyle
        name: pycodestyle
        entry: pycodestyle
        language: system
        types: [python]
    -   id: pylint
        name: pylint
        entry: pylint
        language: system
        types: [python]
        require_serial: true
        args: [
          "-j0",
          "--rcfile=pyproject.toml",
          "-rn", # Only display messages
          "-sn", # Don't display the score
        ]
        exclude: |
            (?x)^(
                doc/source/conf.py
            )$
    -   id: mypy
        name: mypy
        entry: mypy
        language: system
        types: [python]
        require_serial: true
        exclude: |
            (?x)^(
                doc/source/conf.py|
                mlos_core/setup.py|
                mlos_bench/setup.py|
                mlos_viz/setup.py|
                conftest.py
            )$
-   repo: meta
    hooks:
    -   id: check-hooks-apply
    -   id: check-useless-excludes
