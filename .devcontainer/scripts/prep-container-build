#!/bin/sh

set -eu

set -x

scriptdir=$(dirname "$(readlink -f "$0")")
# Start in the script directory.
cd "$scriptdir"

export DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1}

# Build a basic container with the dependencies we need to run the prep script.
docker build \
    --build-arg http_proxy="${http_proxy:-}" \
    --build-arg https_proxy="${https_proxy:-}" \
    --build-arg no_proxy="${no_proxy:-}" \
    --build-arg USER_UID=$(id -u) \
    --build-arg USER_GID=$(id -g) \
    -t mlos-core-basic-prep-deps \
    -f common/Dockerfile common/
# Move up to the repo root.
cd ../../

reporoot="$PWD"
if [ -n "${LOCAL_WORKSPACE_FOLDER:-}" ]; then
    reporoot="$LOCAL_WORKSPACE_FOLDER"
fi

# Run the script in the container.
docker run --rm -v "$reporoot:/src" --workdir /src \
    --user vscode \
    mlos-core-basic-prep-deps \
    /src/.devcontainer/scripts/common/prep-container-build.sh

# Prior to building the container locally, try to pull the latest version from
# upstream to see if we can use it as a cache.
# TODO: Ideally we'd only do this when rebuilding the image, but not sure how
# to detect that form of startup yet.
if [ "${NO_CACHE:-}" != 'true' ]; then
    cacheFrom='mloscore.azurecr.io/mlos-core-devcontainer'
    # Make sure we use an empty config to avoid auth issues for devs with the
    # registry, which should allow anonymous pulls
    tmpdir=$(mktemp -d)
    docker --config="$tmpdir" pull -q "$cacheFrom" >/dev/null || true
    rmdir "$tmpdir"
fi
