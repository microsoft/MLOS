#!/bin/sh

set -eu

set -x

scriptdir=$(dirname "$(readlink -f "$0")")
# Start in the script directory.
cd "$scriptdir"

# Move up to the repo root.
cd ../../

# Make sure the .env file exists for the devcontainer to load.
if [ ! -f .env ]; then
    echo "Creating empty .env file for devcontainer."
    touch .env
fi

# Prep some files to use as context for the devcontainer to build from.
if [ -d .devcontainer/tmp ]; then
    rm -rf .devcontainer/tmp
fi
mkdir -p .devcontainer/tmp/
cp -v conda-envs/mlos_core.yml .devcontainer/tmp/mlos_core.yml
for pkg in mlos_core mlos_bench; do
    cp -v $pkg/setup.py .devcontainer/tmp/$pkg.setup.py
done
cp -v doc/requirements.txt .devcontainer/tmp/doc.requirements.txt

# Copy the script that will be run in the devcontainer to prep the files from
# those in a cross platform way (e.g. proper line endings and whatnot so that
# it's cacheable and reusable across platforms).
cp -v .devcontainer/scripts/common/prep-deps-files.sh .devcontainer/tmp/prep-deps-files.sh

# Prior to building the container locally, try to pull the latest version from
# upstream to see if we can use it as a cache.
# TODO: Ideally we'd only do this when rebuilding the image, but not sure how
# to detect that form of startup yet.
if [ "${NO_CACHE:-}" != 'true' ]; then
    cacheFrom='mloscore.azurecr.io/mlos-core-devcontainer'
    # Make sure we use an empty config to avoid auth issues for devs with the
    # registry, which should allow anonymous pulls
    tmpdir=$(mktemp -d)
    docker --config="$tmpdir" pull -q "$cacheFrom" >/dev/null || true
    rmdir "$tmpdir"
fi
